<?php
/**
 * @file
 * Pugpig WordPress HTML Manifests
 */
?><?php
/*

Licence:
==============================================================================
(c) 2011, Kaldor Holdings Ltd
This module is released under the GNU General Public License.
See COPYRIGHT.txt and LICENSE.txt

 */?><?php

/************************************************************************
Get WordPress attachment manifests
*************************************************************************/
function pugpig_get_attachments($post){
 $output = "";

 $featured_image_id = get_post_thumbnail_id($post->ID);
 if (isset($featured_image_id) && !empty($featured_image_id)) {
   $output .= "# Featured image\n";
   $output .= pugpig_strip_domain(wp_get_attachment_url($featured_image_id)) . "\n";
   $output .= "\n";
 }

 $args = array( 
      'post_type' => 'attachment', 
      'numberposts' => -1, 
      'post_status' => null, 
      'post_parent' => $post->ID 
      );
 $attachments = get_posts($args);

 if (count($attachments) == 0) return $output;

 $output .= "# Post Attachments (" . count($attachments) . " original files, maybe not all used)\n";

 if ($attachments) {
   $post_body  = $post->post_content;

   foreach ( $attachments as $attachment ) {

    if (wp_attachment_is_image($attachment->ID)) {
     // For each attachment, we find all the possible sizes
     // Then we parse the body and include all those that are used
     $output .=  "# Checking: " . pugpig_strip_domain(wp_get_attachment_url($attachment->ID)) . "\n";

     $image_urls = array();
      foreach (array('thumbnail', 'medium', 'large', 'full') as $size) {
        $image_info = wp_get_attachment_image_src($attachment->ID, $size);
        $image_urls[] = $image_info[0]; 
      }
    
      foreach (array_unique($image_urls) as $img) {
        if (strstr($post_body, $img)) {
          $output .=  pugpig_strip_domain($img) . "\n";
        } else {
          // $output .= "# Not using: " .  pugpig_strip_domain($img[0]) . "\n";
        }
      }
         
    } else {
      // Not an image. Just include it
      $output .=  pugpig_strip_domain(wp_get_attachment_url($attachment->ID)) . "\n";

    }

    
   }
 }
 return $output;
}

/************************************************************************
Generate WordPress static theme file
*************************************************************************/
function pugpig_get_theme_manifest() {
  
    $theme_name = get_option("pugpig_opt_theme_switch");

    if (!isset($theme_name) || $theme_name == '')
      $theme_name = get_template();

    $theme_dir = get_theme_root();
    $theme_url = get_theme_root_uri();

    if (!is_dir($theme_dir . "/$theme_name") && $theme_name != '')
      {echo "ERROR: Invalid theme name: $theme_name";
      exit();}

    $theme_path = pugpig_strip_domain($theme_url . "/" . $theme_name);
    $theme_dir = $theme_dir . "/" . $theme_name . "/";

    $output = pugpig_theme_manifest_string($theme_path, $theme_dir, $theme_name);

    if (is_child_theme()){
      $output .= "\n# Child Theme Assets\n";

      $theme_name = get_stylesheet();

      $theme_dir = get_theme_root();

      if (!is_dir($theme_dir . "/$theme_name") && $theme_name != '')
        {echo "ERROR: Invalid child theme name: $theme_name";
        exit();}

      $theme_path = pugpig_strip_domain($theme_url . "/" . $theme_name);
      $theme_dir = $theme_dir . "/" . $theme_name . "/";

      $output .= pugpig_theme_manifest_string($theme_path, $theme_dir, $theme_name);
    }

    //pugpig_create_writable_directory(PUGPIG_MANIFESTPATH);
    //$fh = fopen( PUGPIG_THEME_MANIFEST, 'w' );
    //fwrite ($fh,$output);
    //fclose($fh);
    return $output;
}


/************************************************************************
Extensions allowed in the theme manifest
*************************************************************************/
function isAllowedExtension($file) {
  $allowedExtensions = array('css', 'js', 'png', 'gif', 'jpg', 'jpeg', 'ttf', 'otf', 'svg', 'mp3');
  return in_array(end(explode(".", $file)), $allowedExtensions);
}

/************************************************************************
Generate a fragment of an HTML5 manifest file for a single WordPress post
*************************************************************************/
function pugpig_build_post_manifest_contents($post){
 
  $output = "CACHE MANIFEST\n";

  $output .= "# Post: " . $post->post_title . "\n";
  $output .= "# Generated by the PugPig WordPress plugin" . "\n";
  $output .= "# Generated at: " . pugpig_date3339() . "\n";

  $output .= "\nCACHE:\n";

  if (!is_null($post)) {
   
    $attachment_manifest_items = pugpig_get_attachments($post);
    $attachment_manifest_items = apply_filters('pugpig_attachment_manifest_items', $attachment_manifest_items, $post);
    $output .= $attachment_manifest_items;

    // Extra custom items
    $output .= apply_filters('pugpig_extra_manifest_items', '', $post);

    // The theme assets
    $theme_manifest_items = '';
    $theme_manifest_items .= "\n" . pugpig_get_theme_manifest(); 
    $theme_manifest_items = apply_filters('pugpig_theme_manifest_items', $theme_manifest_items, $post);
    $output .= $theme_manifest_items;

    // If we're a published edition, add the CDN if we have one
    if (TRUE) {  
      $cdn = get_option('pugpig_opt_cdn_domain');
      $output = pupig_add_cdn_to_manifest_lines($output, $cdn);
    }
   
  }
  
  $output .="\nNETWORK:\n*\n";

  return $output;
}


